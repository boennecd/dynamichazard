% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PF.R
\name{PF_get_score_n_hess}
\alias{PF_get_score_n_hess}
\title{Approximate Negative Observation Matrix and Score Vector}
\usage{
PF_get_score_n_hess(object, debug = FALSE)
}
\arguments{
\item{object}{Object of class \code{\link{PF_EM}}.}

\item{debug}{\code{TRUE} if debug information should be printed to the
console.}
}
\value{
A list with the following functions as elements
\item{run_particle_filter}{function to run particle fitler as with
\code{\link{PF_forward_filter}}.}
\item{set_parameters}{function to set the parameters in the model.
The first argument is a vectorized version of \eqn{F} matrix and \eqn{Q}
matrix. The second argument is the fixed effect coefficients.}
\item{set_n_particles}{sets the number of particles to use in
\code{run_particle_filter}.}
\item{get_get_score_n_hess}{computes the approximate negative observation
matrix and score vector. The argument toggles whether the approximate
negative observation matrix should be computed. The last particle cloud
from \code{run_particle_filter} is used.}
}
\description{
Returns a list of functions to approximate the negative observation matrix
and score vector.
}
\details{
The score vector and negative observed information matrix are computed
the particle filter. This comes at an \eqn{O(d^2)} variance where \eqn{d}
is the number of periods. Thus, the approximation may be poor for long
series. The score vector can be used to perform stochastic gradient
descent.
}
\section{Warning}{

The function is still under development so the output and API may change.
}

\examples{
library(dynamichazard)
\dontrun{
.lung <- lung[!is.na(lung$ph.ecog), ]
# standardize
.lung$age <- scale(.lung$age)

set.seed(43588155)
pf_fit <- PF_EM(
  fixed = Surv(time, status == 2) ~ ph.ecog + age,
  random = ~ age, model = "exponential",
  data = .lung, by = 50, id = 1:nrow(.lung),
  Q_0 = diag(1, 2), Q = diag(.5^2, 2), type = "VAR",
  max_T = 800,
  control = PF_control(
    N_fw_n_bw = 250, N_first = 2000, N_smooth = 500, covar_fac = 1.1,
    nu = 6, n_max = 1000L, eps = 1e-5, est_a_0 = FALSE, averaging_start = 100L,
    n_threads = max(parallel::detectCores(logical = FALSE), 1)))

comp_obj <- PF_get_score_n_hess(pf_fit)
comp_obj$set_n_particles(N_fw = 10000L, N_first = 10000L)
comp_obj$run_particle_filter()
comp_obj$get_get_score_n_hess()
}

}
\references{
Cappe, O. and Moulines, E. (2005) Recursive computation of the score and
observed information matrix in hidden markov models.
\emph{IEEE/SP 13th Workshop on Statistical Signal Processing}.

Doucet, A., and Tadić, V. B. (2003) Parameter estimation in general
state-space models using particle methods.
\emph{Annals of the Institute of Statistical Mathematics}, \strong{55(2)},
409–422.

Cappe, O., Moulines, E. and Ryden, T. (2005) Inference in Hidden Markov
Models (Springer Series in Statistics). Springer-Verlag.
}
\seealso{
See the examples at https://github.com/boennecd/dynamichazard/tree/master/examples.
}
